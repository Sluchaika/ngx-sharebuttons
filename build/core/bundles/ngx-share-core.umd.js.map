{
  "version": 3,
  "file": "ngx-share-core.umd.js",
  "sources": [
    "ng://@ngx-share/core/src/share.module.ts",
    "ng://@ngx-share/core/src/n-formatter.pipe.ts",
    "ng://@ngx-share/core/src/share-button.directive.ts",
    "ng://@ngx-share/core/src/share.service.ts",
    "ng://@ngx-share/core/src/share.prop.ts",
    "ng://@ngx-share/core/src/share.operators.ts"
  ],
  "sourcesContent": [
    "import { NgModule, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtons } from './share.service';\nimport { ShareButtonDirective } from './share-button.directive';\nimport { NFormatterPipe } from './n-formatter.pipe';\nimport { ShareButtonsConfig } from './share.models';\nimport { CONFIG } from './share.tokens';\n\nexport function ShareButtonsFactory(config: ShareButtonsConfig) {\n  return new ShareButtons(config);\n}\n\n/** TODO: remove CommonModule */\n@NgModule({\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ]\n})\nexport class ShareModule {\n  static forRoot(config?: ShareButtonsConfig) {\n    return {\n      ngModule: ShareModule,\n      providers: [\n        {provide: CONFIG, useValue: config},\n        {\n          provide: ShareButtons,\n          useFactory: ShareButtonsFactory,\n          deps: [CONFIG]\n        }\n      ]\n    };\n  }\n}\n\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nFormatter'\n})\nexport class NFormatterPipe implements PipeTransform {\n\n  transform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\n}\n\n/** Change share counts to a readable number */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n",
    "import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { catchError, tap, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\n\nimport { ShareButtons } from './share.service';\nimport { IShareButton, ShareButtonRef } from './share.models';\n\n/** Google analytics ref */\ndeclare const ga: Function;\ndeclare const global: any;\ndeclare const window: any;\n\n@Directive({\n  selector: '[shareButton]'\n})\nexport class ShareButtonDirective {\n\n  /** A ref for window object that works on SSR */\n  window: Window;\n\n  /** Button properties */\n  prop: IShareButton;\n\n  /** The validated share URL */\n  url: string;\n\n  /** Button class - used to remove previous class when the button type is changed */\n  buttonClass: string;\n\n  /** Meta tags inputs - initialized from the global options */\n  @Input() sbTitle = this.shareService.title;\n  @Input() sbDescription = this.shareService.description;\n  @Input() sbImage = this.shareService.image;\n  @Input() sbTags = this.shareService.tags;\n\n  /** Create share button  */\n  @Input('shareButton')\n  set setButton(buttonName: string) {\n\n    /** Create a new button of type <buttonName> */\n    const button = {...this.shareService.prop[buttonName]};\n\n    if (button) {\n\n      /** Set share button */\n      this.prop = button;\n\n      /** Remove previous button class */\n      this.renderer.removeClass(this.el.nativeElement, 'sb-' + this.buttonClass);\n\n      /** Add new button class */\n      this.renderer.addClass(this.el.nativeElement, 'sb-' + button.type);\n\n      /** Keep a copy of the class for future replacement */\n      this.buttonClass = button.type;\n\n      /** Get link's shared count */\n      this.emitCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button '${buttonName}' does not exist!`);\n    }\n  }\n\n  /** Set share URL */\n  @Input()\n  set sbUrl(newUrl: string) {\n\n    /** Check if new URL is equal the current URL */\n    if (newUrl !== this.url) {\n      this.url = this.getValidURL(newUrl);\n      this.emitCount();\n    }\n  }\n\n  /** Share count event */\n  @Output() sbCount = new EventEmitter<number>();\n\n  /** Share dialog opened event */\n  @Output() sbOpened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() sbClosed = new EventEmitter<string>();\n\n  constructor(private shareService: ShareButtons,\n              private http: HttpClient,\n              public renderer: Renderer2,\n              public cd: ChangeDetectorRef,\n              private el: ElementRef) {\n    this.window = window || global;\n  }\n\n  /**\n   * Share link on element click\n   */\n  @HostListener('click')\n  onClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n\n    /** Emit opened share button type */\n    this.sbOpened.emit(this.prop.type);\n\n    const ref: ShareButtonRef = {\n      url: this.url,\n      cd: this.cd,\n      renderer: this.renderer,\n      window: this.window,\n      prop: this.prop,\n      el: this.el.nativeElement,\n      os: this.shareService.os,\n      metaTags: {\n        title: this.sbTitle,\n        description: this.sbDescription,\n        image: this.sbImage,\n        tags: this.sbTags,\n        via: this.shareService.twitterAccount,\n      }\n    };\n\n    /** Share the link */\n    of(ref).pipe(\n      ...this.prop.share.operators,\n      tap((sharerURL: string) => this.share(sharerURL)),\n      take(1)\n    ).subscribe();\n  }\n\n  /**\n   * Emit share count\n   */\n  emitCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.prop.count) {\n\n      /** Emit share count to (sbCount) Output */\n      this.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n\n  /**\n   * Open sharing window\n   * @param url - Share URL\n   */\n  share(url: string) {\n    let popUp;\n    if (url) {\n\n      /** GA tracking */\n      if (this.shareService.gaTracking && typeof ga !== 'undefined') {\n        ga('send', 'social', this.prop.type, 'click', this.url);\n      }\n\n      popUp = this.window.open(url, 'newwindow', this.shareService.windowSize);\n    }\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.prop.type);\n        }\n      }, 200);\n    }\n  }\n\n  /**\n   * Get link share count\n   * @param url - Share URL\n   * @returns Share count\n   */\n  count(url: string): Observable<any> {\n\n    if (this.prop.count.request === 'jsonp') {\n\n      return this.http.jsonp<any>(this.prop.count.url + url, 'callback').pipe(\n        ...this.prop.count.operators,\n        catchError(() => empty()),\n      );\n    } else {\n\n      return this.http.get<any>(this.prop.count.url + url, this.prop.count.args).pipe(\n        ...this.prop.count.operators,\n        catchError(() => empty())\n      );\n    }\n  }\n\n  /**\n   * Get a valid URL for sharing\n   * @param url - URL to validate\n   * @returns Sharable URL\n   */\n  private getValidURL(url: string) {\n\n    if (url) {\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n    }\n    /** fallback to page current URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\n}\n",
    "import { Inject, Injectable } from '@angular/core';\nimport { IShareButton, IShareButtons, ShareButtonsConfig, ShareButtonsOptions } from './share.models';\nimport { CONFIG } from './share.tokens';\nimport { shareButtonsProp } from './share.prop';\n\ndeclare const global: any;\ndeclare const window: any;\n\n@Injectable()\nexport class ShareButtons {\n\n  /** List of share buttons */\n  allButtons: string[];\n\n  /** Default options */\n  options: ShareButtonsOptions;\n\n  /** Default properties */\n  prop: IShareButtons;\n\n  /** User OS */\n  os: string;\n\n  constructor(@Inject(CONFIG) config: ShareButtonsConfig) {\n\n    /** Set buttons properties */\n    this.prop = shareButtonsProp;\n\n    /** Set buttons list */\n    this.allButtons = Object.keys(this.prop);\n\n    /** Set default options */\n    this.options = {\n      theme: 'default',\n      include: this.allButtons,\n      exclude: [],\n      size: 0,\n      title: null,\n      image: null,\n      description: null,\n      tags: null,\n      gaTracking: false,\n      twitterAccount: null,\n      windowWidth: 800,\n      windowHeight: 500\n    };\n\n    if (config) {\n      /** Override global options with user's preference */\n      this.options = mergeDeep(this.options, config.options);\n      this.prop = mergeDeep(this.prop, config.prop);\n    }\n\n    /** Get user browser info */\n    this.os = getOS();\n  }\n\n  get twitterAccount() {\n    return this.options.twitterAccount;\n  }\n\n  /**\n   * Get wanted buttons\n   */\n  get buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n\n  get theme() {\n    return this.options.theme;\n  }\n\n  get windowSize() {\n    return `width=${this.options.windowWidth}, height=${this.options.windowHeight}`;\n  }\n\n  get title() {\n    return this.options.title;\n  }\n\n  get description() {\n    return this.options.description;\n  }\n\n  get image() {\n    return this.options.image;\n  }\n\n  get tags() {\n    return this.options.tags;\n  }\n\n  get gaTracking() {\n    return this.options.gaTracking;\n  }\n\n  get size() {\n    return this.options.size;\n  }\n\n  registerButton(name: string, data: IShareButton) {\n    this.prop = {...shareButtonsProp, ...{[name]: data}};\n    this.allButtons = Object.keys(this.prop);\n  }\n\n}\n\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n */\nfunction getOS() {\n  const userAgent = navigator.userAgent || navigator.vendor || (window || global).opera;\n\n  if (/android/i.test(userAgent)) {\n    return 'android';\n  }\n\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\n    return 'ios';\n  }\n\n  return 'desktop';\n}\n\n/**\n * Simple object check.\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {[key]: {}});\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {[key]: source[key]});\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n",
    "import { map } from 'rxjs/operators';\nimport { noneOperator, metaTagsOperator, printOperator, pinterestOperator, copyOperators } from './share.operators';\nimport { IShareButtons } from './share.models';\n\nexport const shareButtonsProp: IShareButtons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?u=',\n      android: 'https://www.facebook.com/sharer/sharer.php?u=',\n      ios: 'https://www.facebook.com/sharer/sharer.php?u=',\n      operators: [noneOperator]\n    },\n    count: {\n      request: 'http',\n      url: 'https://graph.facebook.com?id=',\n      operators: [\n        map((res: any) => +res.share.share_count)\n      ]\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?url=',\n      android: 'https://twitter.com/intent/tweet?url=',\n      ios: 'https://twitter.com/intent/tweet?url=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        description: 'text',\n        tags: 'hashtags',\n        via: 'via'\n      }\n    }\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    share: {\n      desktop: 'https://plus.google.com/share?url=',\n      android: 'https://plus.google.com/share?url=',\n      ios: 'https://plus.google.com/share?url=',\n      operators: [noneOperator],\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    share: {\n      desktop: 'http://www.linkedin.com/shareArticle?url=',\n      android: 'http://www.linkedin.com/shareArticle?url=',\n      ios: 'http://www.linkedin.com/shareArticle?url=',\n      operators: [metaTagsOperator],\n      metaTags: {\n        title: 'title',\n        description: 'summary'\n      },\n    },\n    count: {\n      request: 'jsonp',\n      url: 'https://www.linkedin.com/countserv/count/share?url=',\n      operators: [\n        map((res: any) => +res.count)\n      ]\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    share: {\n      desktop: 'https://in.pinterest.com/pin/create/button/?url=',\n      android: 'https://in.pinterest.com/pin/create/button/?url=',\n      ios: 'https://in.pinterest.com/pin/create/button/?url=',\n      operators: [\n        metaTagsOperator,\n        pinterestOperator\n      ],\n      metaTags: {\n        description: 'description',\n        image: 'media'\n      }\n    },\n    count: {\n      request: 'http',\n      url: 'https://api.pinterest.com/v1/urls/count.json?url=',\n      args: {responseType: 'text'},\n      operators: [\n        map((text: string) => JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1'))),\n        map((res: any) => +res.count)\n      ]\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    share: {\n      desktop: 'http://www.reddit.com/submit?url=',\n      android: 'http://www.reddit.com/submit?url=',\n      ios: 'http://www.reddit.com/submit?url=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        title: 'title'\n      },\n    },\n    count: {\n      request: 'http',\n      url: 'https://buttons.reddit.com/button_info.json?url=',\n      operators: [\n        map((res: any) => +res.data.children[0].data.score)\n      ]\n    },\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    share: {\n      desktop: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      android: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      ios: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        description: 'caption',\n        tags: 'tags'\n      }\n    },\n    count: {\n      request: 'jsonp',\n      url: 'https://api.tumblr.com/v2/share/stats?url=',\n      operators: [\n        map((res: any) => +res.response.note_count)\n      ]\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'https://web.whatsapp.com/send?',\n      ios: 'https://web.whatsapp.com/send?',\n      operators: [metaTagsOperator],\n      metaTags: {\n        description: 'text'\n      }\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?url=',\n      android: 'https://t.me/share/url?url=',\n      ios: 'https://t.me/share/url?url=',\n      operators: [metaTagsOperator],\n      metaTags: {\n        description: 'text'\n      }\n    }\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    share: {\n      desktop: 'http://vk.com/share.php?url=',\n      android: 'http://vk.com/share.php?url=',\n      ios: 'http://vk.com/share.php?url=',\n      operators: [noneOperator]\n    }\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    share: {\n      desktop: 'http://www.stumbleupon.com/submit?url=',\n      android: 'http://www.stumbleupon.com/submit?url=',\n      ios: 'http://www.stumbleupon.com/submit?url=',\n      operators: [noneOperator],\n    }\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    share: {\n      desktop: 'mailto:?',\n      android: 'mailto:?',\n      ios: 'mailto:?',\n      operators: [metaTagsOperator],\n      metaTags: {\n        title: 'subject',\n        description: 'body'\n      }\n    }\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    share: {\n      operators: copyOperators\n    }\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    share: {\n      operators: [printOperator]\n    }\n  },\n  ok: {\n      type: 'ok',\n      text: 'Odnoclassniki',\n      icon: 'none',\n      color: '#4C75A3',\n      share: {\n          desktop: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          android: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          ios: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          operators: [noneOperator]\n      }\n  },\n};\n",
    "import { map, delay } from 'rxjs/operators';\nimport { ShareButtonRef } from './share.models';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * None operator - just return the sharer URL\n */\nexport const noneOperator = map((ref: ShareButtonRef) => ref.prop.share[ref.os] + ref.url);\n\n/**\n * Meta tags operator - Serialize meta tags in the sharer URL\n */\nexport const metaTagsOperator = map((ref: ShareButtonRef) => {\n\n  /** Social network supported meta tags */\n  const metaTags = ref.prop.share.metaTags;\n\n  /** User meta tags values */\n  const metaTagsValues = ref.metaTags;\n\n  /** Social network sharer URL */\n  const SharerURL = ref.prop.share[ref.os];\n\n  /** User share link */\n  let link = ref.url;\n\n  /** Loop over meta tags */\n  if (metaTags) {\n    Object.keys(metaTags).map((key) => {\n      if (metaTagsValues[key]) {\n        link += `&${metaTags[key]}=${metaTagsValues[key]}`;\n      }\n    });\n  }\n  return SharerURL + link;\n});\n\n/**\n * Print button operator\n */\nexport const printOperator = map((ref: ShareButtonRef) => ref.window.print());\n\n/**\n * Pinterest operator - Since Pinterest requires the description and image meta tags,\n * this function checks if the meta tags are presented, if not it falls back to page meta tags\n * This should placed after the metaTagsOperator\n */\nexport const pinterestOperator = map((url: string) => {\n  if (!url.includes('&description')) {\n    /** If user didn't add description, get it from the OG meta tag */\n    const ogDescription: Element = document.querySelector(`meta[property=\"og:description\"]`);\n    if (ogDescription) {\n      url += '&description=' + ogDescription.getAttribute('content');\n    } else {\n      console.warn(`[ShareButtons]: You didn't set the description text for Pinterest button`);\n    }\n  }\n  if (!url.includes('&media')) {\n    const ogImage: Element = document.querySelector(`meta[property=\"og:image\"]`);\n    if (ogImage) {\n      url += '&media=' + ogImage.getAttribute('content');\n    } else {\n      console.warn(`[ShareButtons]: You didn't set the image URL for Pinterest button`);\n    }\n  }\n  return url;\n});\n\n/**\n * Copy button operator - to copy link to clipboard\n */\nexport const copyOperators = [\n  map((ref: ShareButtonRef) => {\n\n    /** Disable button click */\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\n\n    ref.temp = {text: ref.prop.text, icon: ref.prop.icon};\n    const link = decodeURIComponent(ref.url);\n\n    /** Create a hidden textarea element */\n    const textArea = ref.renderer.createElement('textarea');\n    textArea.style.position = 'fixed';\n    textArea.style.top = 0;\n    textArea.style.left = 0;\n    textArea.style.width = '2em';\n    textArea.style.height = '2em';\n    textArea.style.padding = 0;\n    textArea.style.border = 'none';\n    textArea.style.outline = 'none';\n    textArea.style.boxShadow = 'none';\n    textArea.style.background = 'transparent';\n    textArea.value = link;\n\n    ref.renderer.appendChild(ref.el, textArea);\n\n    /** highlight and copy the text */\n    textArea.select();\n    document.execCommand('copy');\n\n    ref.renderer.removeChild(ref.el, textArea);\n\n    /** Set success text and icon on button */\n    ref.prop.text = ref.prop.successText;\n    ref.prop.icon = ref.prop.successIcon;\n    ref.cd.markForCheck();\n\n    return ref;\n  }, (ref: ShareButtonRef) => {\n\n    /** Set error text and icon on button */\n    ref.prop.text = ref.prop.failText;\n    ref.prop.icon = ref.prop.failIcon;\n    ref.cd.markForCheck();\n    console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n  }),\n  delay(2000),\n  map((ref: ShareButtonRef) => {\n\n    /** Enable button click */\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\n\n    /** Set the default text and icon back */\n    ref.prop.text = ref.temp.text;\n    ref.prop.icon = ref.temp.icon;\n    ref.cd.markForCheck();\n  })\n];\n"
  ],
  "names": [
    "HostListener",
    "Output",
    "Input",
    "ElementRef",
    "ChangeDetectorRef",
    "Renderer2",
    "HttpClient",
    "Directive",
    "EventEmitter",
    "Inject",
    "Injectable",
    "map",
    "delay"
  ],
  "mappings": "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"
}
