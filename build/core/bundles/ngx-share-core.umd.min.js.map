{
  "version": 3,
  "file": "ngx-share-core.umd.min.js",
  "sources": [
    "ng://@ngx-share/core/src/share-button.directive.ts",
    "ng://@ngx-share/core/src/share.operators.ts",
    "ng://@ngx-share/core/src/share.prop.ts",
    "ng://@ngx-share/core/src/share.service.ts",
    "ng://@ngx-share/core/src/n-formatter.pipe.ts",
    "ng://@ngx-share/core/src/share.module.ts"
  ],
  "sourcesContent": [
    "import {\n  Directive,\n  Input,\n  Output,\n  HostListener,\n  EventEmitter,\n  ElementRef,\n  Renderer2,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { catchError, tap, take } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\n\nimport { ShareButtons } from './share.service';\nimport { IShareButton, ShareButtonRef } from './share.models';\n\n/** Google analytics ref */\ndeclare const ga: Function;\ndeclare const global: any;\ndeclare const window: any;\n\n@Directive({\n  selector: '[shareButton]'\n})\nexport class ShareButtonDirective {\n\n  /** A ref for window object that works on SSR */\n  window: Window;\n\n  /** Button properties */\n  prop: IShareButton;\n\n  /** The validated share URL */\n  url: string;\n\n  /** Button class - used to remove previous class when the button type is changed */\n  buttonClass: string;\n\n  /** Meta tags inputs - initialized from the global options */\n  @Input() sbTitle = this.shareService.title;\n  @Input() sbDescription = this.shareService.description;\n  @Input() sbImage = this.shareService.image;\n  @Input() sbTags = this.shareService.tags;\n\n  /** Create share button  */\n  @Input('shareButton')\n  set setButton(buttonName: string) {\n\n    /** Create a new button of type <buttonName> */\n    const button = {...this.shareService.prop[buttonName]};\n\n    if (button) {\n\n      /** Set share button */\n      this.prop = button;\n\n      /** Remove previous button class */\n      this.renderer.removeClass(this.el.nativeElement, 'sb-' + this.buttonClass);\n\n      /** Add new button class */\n      this.renderer.addClass(this.el.nativeElement, 'sb-' + button.type);\n\n      /** Keep a copy of the class for future replacement */\n      this.buttonClass = button.type;\n\n      /** Get link's shared count */\n      this.emitCount();\n    } else {\n      throw new Error(`[ShareButtons]: The share button '${buttonName}' does not exist!`);\n    }\n  }\n\n  /** Set share URL */\n  @Input()\n  set sbUrl(newUrl: string) {\n\n    /** Check if new URL is equal the current URL */\n    if (newUrl !== this.url) {\n      this.url = this.getValidURL(newUrl);\n      this.emitCount();\n    }\n  }\n\n  /** Share count event */\n  @Output() sbCount = new EventEmitter<number>();\n\n  /** Share dialog opened event */\n  @Output() sbOpened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() sbClosed = new EventEmitter<string>();\n\n  constructor(private shareService: ShareButtons,\n              private http: HttpClient,\n              public renderer: Renderer2,\n              public cd: ChangeDetectorRef,\n              private el: ElementRef) {\n    this.window = window || global;\n  }\n\n  /**\n   * Share link on element click\n   */\n  @HostListener('click')\n  onClick() {\n    /** Set user did not set the url using [sbUrl], use window URL */\n    if (!this.url) {\n      this.url = encodeURIComponent(this.window.location.href);\n    }\n\n    /** Emit opened share button type */\n    this.sbOpened.emit(this.prop.type);\n\n    const ref: ShareButtonRef = {\n      url: this.url,\n      cd: this.cd,\n      renderer: this.renderer,\n      window: this.window,\n      prop: this.prop,\n      el: this.el.nativeElement,\n      os: this.shareService.os,\n      metaTags: {\n        title: this.sbTitle,\n        description: this.sbDescription,\n        image: this.sbImage,\n        tags: this.sbTags,\n        via: this.shareService.twitterAccount,\n      }\n    };\n\n    /** Share the link */\n    of(ref).pipe(\n      ...this.prop.share.operators,\n      tap((sharerURL: string) => this.share(sharerURL)),\n      take(1)\n    ).subscribe();\n  }\n\n  /**\n   * Emit share count\n   */\n  emitCount() {\n    /** Only if share count has observers & the button has support for share count */\n    if (this.url && this.sbCount.observers.length && this.prop.count) {\n\n      /** Emit share count to (sbCount) Output */\n      this.count(this.url).subscribe((count: number) => this.sbCount.emit(count));\n    }\n  }\n\n  /**\n   * Open sharing window\n   * @param url - Share URL\n   */\n  share(url: string) {\n    let popUp;\n    if (url) {\n\n      /** GA tracking */\n      if (this.shareService.gaTracking && typeof ga !== 'undefined') {\n        ga('send', 'social', this.prop.type, 'click', this.url);\n      }\n\n      popUp = this.window.open(url, 'newwindow', this.shareService.windowSize);\n    }\n\n    /** If dialog closed event has subscribers, emit closed dialog type */\n    if (this.sbClosed.observers.length && popUp) {\n      const pollTimer = this.window.setInterval(() => {\n        if (popUp.closed) {\n          this.window.clearInterval(pollTimer);\n          this.sbClosed.emit(this.prop.type);\n        }\n      }, 200);\n    }\n  }\n\n  /**\n   * Get link share count\n   * @param url - Share URL\n   * @returns Share count\n   */\n  count(url: string): Observable<any> {\n\n    if (this.prop.count.request === 'jsonp') {\n\n      return this.http.jsonp<any>(this.prop.count.url + url, 'callback').pipe(\n        ...this.prop.count.operators,\n        catchError(() => empty()),\n      );\n    } else {\n\n      return this.http.get<any>(this.prop.count.url + url, this.prop.count.args).pipe(\n        ...this.prop.count.operators,\n        catchError(() => empty())\n      );\n    }\n  }\n\n  /**\n   * Get a valid URL for sharing\n   * @param url - URL to validate\n   * @returns Sharable URL\n   */\n  private getValidURL(url: string) {\n\n    if (url) {\n      const r = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\n      if (r.test(url)) {\n        return encodeURIComponent(url);\n      }\n      console.warn(`[ShareButtons]: Sharing link '${url}' is invalid!`);\n    }\n    /** fallback to page current URL */\n    return encodeURIComponent(this.window.location.href);\n  }\n\n}\n",
    "import { map, delay } from 'rxjs/operators';\nimport { ShareButtonRef } from './share.models';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * None operator - just return the sharer URL\n */\nexport const noneOperator = map((ref: ShareButtonRef) => ref.prop.share[ref.os] + ref.url);\n\n/**\n * Meta tags operator - Serialize meta tags in the sharer URL\n */\nexport const metaTagsOperator = map((ref: ShareButtonRef) => {\n\n  /** Social network supported meta tags */\n  const metaTags = ref.prop.share.metaTags;\n\n  /** User meta tags values */\n  const metaTagsValues = ref.metaTags;\n\n  /** Social network sharer URL */\n  const SharerURL = ref.prop.share[ref.os];\n\n  /** User share link */\n  let link = ref.url;\n\n  /** Loop over meta tags */\n  if (metaTags) {\n    Object.keys(metaTags).map((key) => {\n      if (metaTagsValues[key]) {\n        link += `&${metaTags[key]}=${metaTagsValues[key]}`;\n      }\n    });\n  }\n  return SharerURL + link;\n});\n\n/**\n * Print button operator\n */\nexport const printOperator = map((ref: ShareButtonRef) => ref.window.print());\n\n/**\n * Pinterest operator - Since Pinterest requires the description and image meta tags,\n * this function checks if the meta tags are presented, if not it falls back to page meta tags\n * This should placed after the metaTagsOperator\n */\nexport const pinterestOperator = map((url: string) => {\n  if (!url.includes('&description')) {\n    /** If user didn't add description, get it from the OG meta tag */\n    const ogDescription: Element = document.querySelector(`meta[property=\"og:description\"]`);\n    if (ogDescription) {\n      url += '&description=' + ogDescription.getAttribute('content');\n    } else {\n      console.warn(`[ShareButtons]: You didn't set the description text for Pinterest button`);\n    }\n  }\n  if (!url.includes('&media')) {\n    const ogImage: Element = document.querySelector(`meta[property=\"og:image\"]`);\n    if (ogImage) {\n      url += '&media=' + ogImage.getAttribute('content');\n    } else {\n      console.warn(`[ShareButtons]: You didn't set the image URL for Pinterest button`);\n    }\n  }\n  return url;\n});\n\n/**\n * Copy button operator - to copy link to clipboard\n */\nexport const copyOperators = [\n  map((ref: ShareButtonRef) => {\n\n    /** Disable button click */\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'none');\n\n    ref.temp = {text: ref.prop.text, icon: ref.prop.icon};\n    const link = decodeURIComponent(ref.url);\n\n    /** Create a hidden textarea element */\n    const textArea = ref.renderer.createElement('textarea');\n    textArea.style.position = 'fixed';\n    textArea.style.top = 0;\n    textArea.style.left = 0;\n    textArea.style.width = '2em';\n    textArea.style.height = '2em';\n    textArea.style.padding = 0;\n    textArea.style.border = 'none';\n    textArea.style.outline = 'none';\n    textArea.style.boxShadow = 'none';\n    textArea.style.background = 'transparent';\n    textArea.value = link;\n\n    ref.renderer.appendChild(ref.el, textArea);\n\n    /** highlight and copy the text */\n    textArea.select();\n    document.execCommand('copy');\n\n    ref.renderer.removeChild(ref.el, textArea);\n\n    /** Set success text and icon on button */\n    ref.prop.text = ref.prop.successText;\n    ref.prop.icon = ref.prop.successIcon;\n    ref.cd.markForCheck();\n\n    return ref;\n  }, (ref: ShareButtonRef) => {\n\n    /** Set error text and icon on button */\n    ref.prop.text = ref.prop.failText;\n    ref.prop.icon = ref.prop.failIcon;\n    ref.cd.markForCheck();\n    console.warn('[ShareButtons]: Print button could not copy URL to clipboard');\n  }),\n  delay(2000),\n  map((ref: ShareButtonRef) => {\n\n    /** Enable button click */\n    ref.renderer.setStyle(ref.el, 'pointer-events', 'auto');\n\n    /** Set the default text and icon back */\n    ref.prop.text = ref.temp.text;\n    ref.prop.icon = ref.temp.icon;\n    ref.cd.markForCheck();\n  })\n];\n",
    "import { map } from 'rxjs/operators';\nimport { noneOperator, metaTagsOperator, printOperator, pinterestOperator, copyOperators } from './share.operators';\nimport { IShareButtons } from './share.models';\n\nexport const shareButtonsProp: IShareButtons = {\n  facebook: {\n    type: 'facebook',\n    text: 'Facebook',\n    icon: 'fa fa-facebook',\n    color: '#3b5998',\n    share: {\n      desktop: 'https://www.facebook.com/sharer/sharer.php?u=',\n      android: 'https://www.facebook.com/sharer/sharer.php?u=',\n      ios: 'https://www.facebook.com/sharer/sharer.php?u=',\n      operators: [noneOperator]\n    },\n    count: {\n      request: 'http',\n      url: 'https://graph.facebook.com?id=',\n      operators: [\n        map((res: any) => +res.share.share_count)\n      ]\n    }\n  },\n  twitter: {\n    type: 'twitter',\n    text: 'Twitter',\n    icon: 'fa fa-twitter',\n    color: '#00acee',\n    share: {\n      desktop: 'https://twitter.com/intent/tweet?url=',\n      android: 'https://twitter.com/intent/tweet?url=',\n      ios: 'https://twitter.com/intent/tweet?url=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        description: 'text',\n        tags: 'hashtags',\n        via: 'via'\n      }\n    }\n  },\n  google: {\n    type: 'google',\n    text: 'Google+',\n    icon: 'fa fa-google-plus',\n    color: '#DB4437',\n    share: {\n      desktop: 'https://plus.google.com/share?url=',\n      android: 'https://plus.google.com/share?url=',\n      ios: 'https://plus.google.com/share?url=',\n      operators: [noneOperator],\n    }\n  },\n  linkedin: {\n    type: 'linkedin',\n    text: 'LinkedIn',\n    icon: 'fa fa-linkedin',\n    color: '#006fa6',\n    share: {\n      desktop: 'http://www.linkedin.com/shareArticle?url=',\n      android: 'http://www.linkedin.com/shareArticle?url=',\n      ios: 'http://www.linkedin.com/shareArticle?url=',\n      operators: [metaTagsOperator],\n      metaTags: {\n        title: 'title',\n        description: 'summary'\n      },\n    },\n    count: {\n      request: 'jsonp',\n      url: 'https://www.linkedin.com/countserv/count/share?url=',\n      operators: [\n        map((res: any) => +res.count)\n      ]\n    }\n  },\n  pinterest: {\n    type: 'pinterest',\n    text: 'Pinterest',\n    icon: 'fa fa-pinterest-p',\n    color: '#BD091D',\n    share: {\n      desktop: 'https://in.pinterest.com/pin/create/button/?url=',\n      android: 'https://in.pinterest.com/pin/create/button/?url=',\n      ios: 'https://in.pinterest.com/pin/create/button/?url=',\n      operators: [\n        metaTagsOperator,\n        pinterestOperator\n      ],\n      metaTags: {\n        description: 'description',\n        image: 'media'\n      }\n    },\n    count: {\n      request: 'http',\n      url: 'https://api.pinterest.com/v1/urls/count.json?url=',\n      args: {responseType: 'text'},\n      operators: [\n        map((text: string) => JSON.parse(text.replace(/^receiveCount\\((.*)\\)/, '$1'))),\n        map((res: any) => +res.count)\n      ]\n    }\n  },\n  reddit: {\n    type: 'reddit',\n    text: 'Reddit',\n    icon: 'fa fa-reddit-alien',\n    color: '#FF4006',\n    share: {\n      desktop: 'http://www.reddit.com/submit?url=',\n      android: 'http://www.reddit.com/submit?url=',\n      ios: 'http://www.reddit.com/submit?url=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        title: 'title'\n      },\n    },\n    count: {\n      request: 'http',\n      url: 'https://buttons.reddit.com/button_info.json?url=',\n      operators: [\n        map((res: any) => +res.data.children[0].data.score)\n      ]\n    },\n  },\n  tumblr: {\n    type: 'tumblr',\n    text: 'Tumblr',\n    icon: 'fa fa-tumblr',\n    color: '#36465D',\n    share: {\n      desktop: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      android: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      ios: 'http://tumblr.com/widgets/share/tool?canonicalUrl=',\n      operators: [\n        metaTagsOperator\n      ],\n      metaTags: {\n        description: 'caption',\n        tags: 'tags'\n      }\n    },\n    count: {\n      request: 'jsonp',\n      url: 'https://api.tumblr.com/v2/share/stats?url=',\n      operators: [\n        map((res: any) => +res.response.note_count)\n      ]\n    }\n  },\n  whatsapp: {\n    type: 'whatsapp',\n    text: 'WhatsApp',\n    icon: 'fa fa-whatsapp',\n    color: '#25D366',\n    share: {\n      desktop: 'https://web.whatsapp.com/send?',\n      android: 'https://web.whatsapp.com/send?',\n      ios: 'https://web.whatsapp.com/send?',\n      operators: [metaTagsOperator],\n      metaTags: {\n        description: 'text'\n      }\n    }\n  },\n  telegram: {\n    type: 'telegram',\n    text: 'Telegram',\n    icon: 'fa fa-send',\n    color: '#0088cc',\n    share: {\n      desktop: 'https://t.me/share/url?url=',\n      android: 'https://t.me/share/url?url=',\n      ios: 'https://t.me/share/url?url=',\n      operators: [metaTagsOperator],\n      metaTags: {\n        description: 'text'\n      }\n    }\n  },\n  vk: {\n    type: 'vk',\n    text: 'VKontakte',\n    icon: 'fa fa-vk',\n    color: '#4C75A3',\n    share: {\n      desktop: 'http://vk.com/share.php?url=',\n      android: 'http://vk.com/share.php?url=',\n      ios: 'http://vk.com/share.php?url=',\n      operators: [noneOperator]\n    }\n  },\n  stumble: {\n    type: 'stumble',\n    text: 'Stumble',\n    icon: 'fa fa-stumbleupon',\n    color: '#eb4924',\n    share: {\n      desktop: 'http://www.stumbleupon.com/submit?url=',\n      android: 'http://www.stumbleupon.com/submit?url=',\n      ios: 'http://www.stumbleupon.com/submit?url=',\n      operators: [noneOperator],\n    }\n  },\n  email: {\n    type: 'email',\n    text: 'Email',\n    icon: 'fa fa-envelope',\n    color: '#32A1A3',\n    share: {\n      desktop: 'mailto:?',\n      android: 'mailto:?',\n      ios: 'mailto:?',\n      operators: [metaTagsOperator],\n      metaTags: {\n        title: 'subject',\n        description: 'body'\n      }\n    }\n  },\n  copy: {\n    type: 'copy',\n    text: 'Copy link',\n    successText: 'Copied',\n    successIcon: 'fa fa-check',\n    failText: 'Error',\n    failIcon: 'fa fa-exclamation',\n    icon: 'fa fa-link',\n    color: '#607D8B',\n    share: {\n      operators: copyOperators\n    }\n  },\n  print: {\n    type: 'print',\n    text: 'Print',\n    icon: 'fa fa-print',\n    color: 'brown',\n    share: {\n      operators: [printOperator]\n    }\n  },\n  ok: {\n      type: 'ok',\n      text: 'Odnoclassniki',\n      icon: 'none',\n      color: '#4C75A3',\n      share: {\n          desktop: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          android: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          ios: 'https://connect.ok.ru/dk?st.cmd=WidgetSharePreview&st.shareUrl=',\n          operators: [noneOperator]\n      }\n  },\n};\n",
    "import { Inject, Injectable } from '@angular/core';\nimport { IShareButton, IShareButtons, ShareButtonsConfig, ShareButtonsOptions } from './share.models';\nimport { CONFIG } from './share.tokens';\nimport { shareButtonsProp } from './share.prop';\n\ndeclare const global: any;\ndeclare const window: any;\n\n@Injectable()\nexport class ShareButtons {\n\n  /** List of share buttons */\n  allButtons: string[];\n\n  /** Default options */\n  options: ShareButtonsOptions;\n\n  /** Default properties */\n  prop: IShareButtons;\n\n  /** User OS */\n  os: string;\n\n  constructor(@Inject(CONFIG) config: ShareButtonsConfig) {\n\n    /** Set buttons properties */\n    this.prop = shareButtonsProp;\n\n    /** Set buttons list */\n    this.allButtons = Object.keys(this.prop);\n\n    /** Set default options */\n    this.options = {\n      theme: 'default',\n      include: this.allButtons,\n      exclude: [],\n      size: 0,\n      title: null,\n      image: null,\n      description: null,\n      tags: null,\n      gaTracking: false,\n      twitterAccount: null,\n      windowWidth: 800,\n      windowHeight: 500\n    };\n\n    if (config) {\n      /** Override global options with user's preference */\n      this.options = mergeDeep(this.options, config.options);\n      this.prop = mergeDeep(this.prop, config.prop);\n    }\n\n    /** Get user browser info */\n    this.os = getOS();\n  }\n\n  get twitterAccount() {\n    return this.options.twitterAccount;\n  }\n\n  /**\n   * Get wanted buttons\n   */\n  get buttons() {\n    if (!this.options.exclude.length) {\n      return this.options.include;\n    }\n    return this.options.include.filter((btn) => this.options.exclude.indexOf(btn) < 0);\n  }\n\n  get theme() {\n    return this.options.theme;\n  }\n\n  get windowSize() {\n    return `width=${this.options.windowWidth}, height=${this.options.windowHeight}`;\n  }\n\n  get title() {\n    return this.options.title;\n  }\n\n  get description() {\n    return this.options.description;\n  }\n\n  get image() {\n    return this.options.image;\n  }\n\n  get tags() {\n    return this.options.tags;\n  }\n\n  get gaTracking() {\n    return this.options.gaTracking;\n  }\n\n  get size() {\n    return this.options.size;\n  }\n\n  registerButton(name: string, data: IShareButton) {\n    this.prop = {...shareButtonsProp, ...{[name]: data}};\n    this.allButtons = Object.keys(this.prop);\n  }\n\n}\n\n/**\n * Determine the mobile operating system.\n * This function returns one of 'iOS', 'Android', 'Windows Phone', or 'unknown'.\n */\nfunction getOS() {\n  const userAgent = navigator.userAgent || navigator.vendor || (window || global).opera;\n\n  if (/android/i.test(userAgent)) {\n    return 'android';\n  }\n\n  // iOS detection from: http://stackoverflow.com/a/9039885/177710\n  if (/iPad|iPhone|iPod/.test(userAgent) && !(window || global).MSStream) {\n    return 'ios';\n  }\n\n  return 'desktop';\n}\n\n/**\n * Simple object check.\n */\nfunction isObject(item) {\n  return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\n/**\n * Deep merge two objects.\n */\nfunction mergeDeep(target, ...sources) {\n  if (!sources.length) {\n    return target;\n  }\n  const source = sources.shift();\n\n  if (isObject(target) && isObject(source)) {\n    for (const key in source) {\n      if (isObject(source[key])) {\n        if (!target[key]) {\n          Object.assign(target, {[key]: {}});\n        }\n        mergeDeep(target[key], source[key]);\n      } else {\n        Object.assign(target, {[key]: source[key]});\n      }\n    }\n  }\n\n  return mergeDeep(target, ...sources);\n}\n",
    "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'nFormatter'\n})\nexport class NFormatterPipe implements PipeTransform {\n\n  transform(num: any, digits?: any): any {\n\n    if (typeof num !== 'number') {\n      num = 1;\n    }\n\n    return nFormatter(num, digits);\n  }\n\n}\n\n/** Change share counts to a readable number */\nexport const nFormatter = (num: number, digits: number) => {\n\n  const si = [\n    {value: 1E18, symbol: 'E'},\n    {value: 1E15, symbol: 'P'},\n    {value: 1E12, symbol: 'T'},\n    {value: 1E9, symbol: 'G'},\n    {value: 1E6, symbol: 'M'},\n    {value: 1E3, symbol: 'K'}\n  ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n\n  for (let i = 0; i < si.length; i++) {\n    if (num >= si[i].value) {\n      return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n    }\n  }\n  return num.toFixed(digits).replace(rx, '$1');\n};\n",
    "import { NgModule, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ShareButtons } from './share.service';\nimport { ShareButtonDirective } from './share-button.directive';\nimport { NFormatterPipe } from './n-formatter.pipe';\nimport { ShareButtonsConfig } from './share.models';\nimport { CONFIG } from './share.tokens';\n\nexport function ShareButtonsFactory(config: ShareButtonsConfig) {\n  return new ShareButtons(config);\n}\n\n/** TODO: remove CommonModule */\n@NgModule({\n  declarations: [\n    ShareButtonDirective,\n    NFormatterPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    CommonModule,\n    ShareButtonDirective,\n    NFormatterPipe\n  ]\n})\nexport class ShareModule {\n  static forRoot(config?: ShareButtonsConfig) {\n    return {\n      ngModule: ShareModule,\n      providers: [\n        {provide: CONFIG, useValue: config},\n        {\n          provide: ShareButtons,\n          useFactory: ShareButtonsFactory,\n          deps: [CONFIG]\n        }\n      ]\n    };\n  }\n}\n\n"
  ],
  "names": [
    "sources",
    "_i",
    "arguments",
    "length",
    "target",
    "key",
    "source",
    "Object",
    "assign",
    "_b",
    "metaTags",
    "metaTagsValues",
    "link",
    "SharerURL",
    "url",
    "ogDescription",
    "getAttribute",
    "console",
    "warn",
    "includes",
    "ogImage",
    "document",
    "querySelector",
    "ref",
    "renderer",
    "setStyle",
    "el",
    "decodeURIComponent",
    "textArea",
    "style",
    "top",
    "left",
    "width",
    "height",
    "padding",
    "border",
    "outline",
    "boxShadow",
    "background",
    "value",
    "appendChild",
    "select",
    "removeChild",
    "prop",
    "text",
    "successText",
    "cd",
    "markForCheck",
    "failText",
    "delay",
    "map",
    "temp",
    "icon",
    "color",
    "share",
    "desktop",
    "android",
    "ios",
    "operators",
    "noneOperator",
    "count",
    "request",
    "res",
    "share_count",
    "twitter",
    "type",
    "metaTagsOperator",
    "description",
    "tags",
    "via",
    "google",
    "linkedin",
    "title",
    "pinterest",
    "pinterestOperator",
    "image",
    "args",
    "responseType",
    "JSON",
    "parse",
    "replace",
    "reddit",
    "data",
    "children",
    "score",
    "tumblr",
    "response",
    "note_count",
    "whatsapp",
    "telegram",
    "vk",
    "stumble",
    "email",
    "copy",
    "successIcon",
    "failIcon",
    "copyOperators",
    "print",
    "printOperator",
    "ok",
    "ShareButtons",
    "config",
    "this",
    "allButtons",
    "keys",
    "options",
    "include",
    "size",
    "gaTracking",
    "twitterAccount",
    "windowWidth",
    "windowHeight",
    "mergeDeep",
    "os",
    "userAgent",
    "navigator",
    "vendor",
    "window",
    "global",
    "opera",
    "test",
    "getOS",
    "defineProperty",
    "prototype",
    "enumerable",
    "configurable",
    "get",
    "_this",
    "exclude",
    "theme",
    "decorators",
    "Injectable",
    "ctorParameters",
    "undefined",
    "Inject",
    "CONFIG",
    "ShareButtonDirective",
    "shareService",
    "http$$1",
    "http",
    "sbOpened",
    "EventEmitter",
    "set",
    "buttonName",
    "button",
    "removeClass",
    "nativeElement",
    "buttonClass",
    "addClass",
    "emitCount",
    "encodeURIComponent",
    "location",
    "href",
    "emit",
    "sbTitle",
    "sbDescription",
    "sbImage",
    "sbTags",
    "sbCount",
    "observers",
    "subscribe",
    "popUp",
    "ga",
    "sbClosed",
    "pollTimer_1",
    "setInterval",
    "closed",
    "clearInterval",
    "_a",
    "getValidURL",
    "Directive",
    "selector",
    "HttpClient",
    "Renderer2",
    "ChangeDetectorRef",
    "ElementRef",
    "Input",
    "Output",
    "onClick",
    "HostListener",
    "NFormatterPipe",
    "transform",
    "num",
    "digits",
    "nFormatter",
    "name",
    "si",
    "symbol"
  ],
  "mappings": "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"
}
